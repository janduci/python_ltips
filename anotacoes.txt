https://pythontutor.com/
Visualizacao gráfica do código em execução

Instalar o módulo ipython 
PEP8 é o guia de estilos do Python, por exemplo, apertar 4 vezes a barra de espaços (identação). Outro exemplo, utilizar apenas 4 níveis de recuo, ou seja, 16 vezes a barra. 

: no final significa que um novo bloco será iniciado com nocas instruções

Python é snake case = definição de variáveis letras minúsculas separadas por undeline

O interpretador Python entende intruções que estão divididas em 3 categorias:

1) Expressão/Expression = instrução que espera um valor de retorno. Por exemplo 1 + 1 -> 2
2) Declaração/Statement = instrução que prepara o interpretador para uma determinada tarefa mas não retorna valor, por exemplo, if - else
3) Atribuição/Assignment = instrução que pega o retorno de uma expressão e processa o seu valor com intuito de armazenar, por exemplo, soma = 40 + 2

Comando para verificar o ambiente do seu Python
"python3 -m site" 
m = módulo
site = lista o ambiente do seu Python

Formatação de texto em Python:
concatenação -> %s
str.format -> {}
f-strings -> f"{}"
Site ótimo para formatação: https://pyformat.info/

Um tipo de dado em Python é tudo que tenha um ID de memória

########## Parenteses utilizados em métodos:

O método isdigit() vem da classe str (string) no Python. Toda string em Python é um objeto da classe str, e essa classe fornece vários métodos que você pode usar para manipular ou analisar o conteúdo da string.

Quando você escreve algumacoisa.isdigit(), você está chamando um método embutido da classe str que verifica se o caractere (ou a string inteira) é composto apenas por dígitos numéricos. Os parênteses () em métodos como .isdigit() indicam que estamos chamando o método. Eles são usados para executar a lógica ou o comportamento definido dentro do método. Se você omitir os parênteses, estará apenas acessando o método como um objeto, mas não o executará.

Método vs. Função:
Função: É uma função definida fora de uma classe e pode ser chamada independentemente de qualquer objeto.
Método: É uma função que faz parte de uma classe e deve ser chamada em um objeto ou classe.

A diferença entre atributo e método em Python está relacionada à função e ao propósito de cada um dentro de uma classe. Ambos são componentes de uma classe e podem ser usados em objetos, mas têm finalidades distintas.

Métodos tem ()
Enquanto que atributo não tem
Ambos são precedidos de ponto

Paradigma da programação
Programação funcional x programação imperativo

Funções úteis da biblioteca built-in
https://docs.python.org/pt-br/3.10/library/functions.html

########## FUNÇÕES

Verificar as funções builtins (não precisa importar) do Python
dir(__builtins__)

Listando módulos do Python
help("modules")

Padrão de nomenclatura no Python:
Nomeado tudo em maiusculo = constante
Primeira letra maiuscula e as demais minusculas = classe
Com parentêses no final = função
Nome minusculo sem o parentêses = variável

Exemplos: 

In [13]: import random
In [14]: random.
  betavariate()     choices()         getrandbits()     main()            randbytes()       randrange()       setstate()         
  binomialvariate() expovariate()     getstate()        normalvariate()   randint()         RECIP_BPF         SG_MAGICCONST      
  BPF               gammavariate()    LOG4              NV_MAGICCONST     Random            sample()          shuffle()         >
  choice()          gauss()           lognormvariate()  paretovariate()   random()          seed()            SystemRandom   

Toda função sempre retorna um valor, mesmo que none (acontece o none quando vc esquece de colocar o return)
Mas tem casos que o retur não é necessário, por exemplo:
def exibir_mensagem():
    print("Olá, mundo!")

exibir_mensagem()  # Saída: Olá, mundo!

Acima, a função só executa o código interno (exibe a mensagem) e não retorna nada
Se você acrescentar:

resultado = exibir_mensagem()
print(resultado)  # Saída: None

E assim nesse caso será retornado o none, pois não há o "return"
Uma função que não retorna nada de útil é conhecida como procedure

Toda função deve resolver apenas um problema

As funções são formadas por alguns elementos:

definição (ou atribuição) - def nome_da_funcao
assinatura - Tudo o que estiver entre parenteses - (a, b ,c) e antes de :
código interno
valor de retorno - Tudo o que tiver depois de return

Argumentos:
Ao passar os argumentos para as funções podemos passa-los posicionalmente ou nomeadamente.

Argumentos posicionais:
nome_da_funcao(1, 2, 3)
Argumentos nominais:
nome_da_funcao(a=1, b=2, c=3)

Os parâmetros de uma função são as variáveis que recebem valores dentro de uma função. Eles são declarados na assinatura da função, entre parênteses. 
def funcao(a, b, c)

A função filter() em Python é usada para filtrar elementos de uma sequência (como listas, tuplas ou conjuntos) com base em uma condição definida por uma função. Exemplo:

a)
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

pares = list(filter(lambda x: x % 2 == 0, numeros))
print(pares)  # Saída: [2, 4, 6, 8, 10]

b)
palavras = ["Python", "Java", "C", "JavaScript", "Go"]

longas = list(filter(lambda p: len(p) > 5, palavras))
print(longas)  # Saída: ['Python', 'JavaScript']

Quando usar filter()?
Quando precisar filtrar elementos de uma coleção sem criar um laço for manualmente.
Para tornar o código mais funcional e legível.
Quando quiser evitar criar listas temporárias com for e if.

Em Python funções também são objetos, e podem ser utilizadas como qualquer outro objeto, ou seja, uma função pode ser passada como paramêtro para outra função, exemplo:

def transforma_em_maiusculo(texto):
    return texto.upper()

def transforma_em_minusculo(texto):
    return texto.lower()

def divide_por_2(numero):
    return numero // 2

# e nossa função principal

def faz_algo(valor, funcao):
    return funcao(valor)

print(faz_algo("bruno", transforma_em_maiusculo))
# BRUNO

Função de primeira classe é uma função que pode ser tratada como qualquer outro valor, ou seja, pode ser:
Atribuída a uma variável
Passada como argumento para outra função
Retornada por outra função
Armazenada em estrutura de dados, como lista e dicionários

Em Python, funções anônimas são funções sem um nome explícito, definidas usando a palavra-chave lambda. Elas são conhecidas como funções lambda e geralmente são usadas para operações curtas e simples, onde não há necessidade de definir uma função completa com def. Exemplo:

a)
lambda argumentos: expressão

b)
soma = lambda x, y: x + y
print(soma(3, 5))  # Saída: 8

c)
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(pares)  # Saída: [2, 4]


Comparando a denição/escrita de funções:

def soma(a, b):
  return a + b

lambda a, b: a + b

No final são a mesma coisa, mas a primeira é mais explicita e a segunda é mais "limpa"

O protocolo callable em Python define a capacidade de um objeto ser chamado como uma função, ou seja, ele pode ser invocado com (), como se fosse uma função normal. Para verificar se um objeto é callable, usamos a função embutida callable(obj), que retorna True se o objeto puder ser chamado e False caso contrário.

def saudacao():
    return "Olá, mundo!"

print(callable(saudacao))  # Saída: True
print(saudacao())  # Saída: "Olá, mundo!"


Estratégias de DEBUG:

a) utilizar o -i do ipython
b) posicionar a função print em locais estratégicos do código para validar e/ou endenter as saídas
c) utilizar o módulo PDB (utilizar o help para mais informações)

#### Tipos de dados

Tipos de dados primitivos

São os blocos de construção fundamentais dos dados em linguagens de programação, incluindo 
Python. Eles representam os valores mais básicos e simples que não são compostos por outros 
tipos de dados. Aqui estão os tipos de dados primitivos mais comuns:
int
float
booleano
strings

Tipos de dados compostos:

Também conhecidos como tipos de dados agregados, são estruturas de dados que podem conter 
múltiplos valores agrupados. Em Python, eles permitem que você armazene coleções de itens 
de diferentes tipos, aumentando a flexibilidade e a complexidade dos programas que você 
pode escrever. Aqui estão alguns dos tipos de dados compostos mais comuns:
set
tupla 
dicionários
lista 

